plot(dat_kde, lwd=3)
dat_kde = density(dat, bw=10)
plot(dat_kde, lwd=3)
### How smoothing bandwidth affects the density estimate.
h_seq = c(seq(from=0.5, to=2, by=0.1), seq(from=2.5,to=7.0,by=0.5),
seq(from=7.2, to=9, by=0.2))
h_seq
for(h0 in h_seq){
plot(density(dat, bw=h0), lwd=3, ylim=c(0, 0.055), col="dodgerblue",
main=paste("h =",h0), xlim=c(40,100), xlab="X")
Sys.sleep(1)
}
den <- density(eruption_dt, bw=bwds)
plot(den)
for(h0 in h_seq){
plot(density(dat, bw=h0), lwd=3, ylim=c(0, 0.055), col="dodgerblue",
main=paste("h =",h0), xlim=c(40,100), xlab="X")
Sys.sleep(1)
}
plot(dat_kde1, lwd=2, col="red")
lines(dat_kde2, lwd=2, col="black")
lines(dat_kde3, lwd=2, col="blue")
## effect of kernel
dat_kde1 = density(dat)
dat_kde2 = density(dat, kernel = "rectangular")
dat_kde3 = density(dat, kernel='epanechnikov')
plot(dat_kde1, lwd=2, col="red")
lines(dat_kde2, lwd=2, col="black")
lines(dat_kde3, lwd=2, col="blue")
legend("topleft",c("Gaussian","Rectangular","Epanechnikov"),
lwd=6, col=c("red","black","blue"))
## bootstrap estimate
h0 = 4
dat_kde = density(dat, from = 20, to=120, n=5000, bw=h0)
n = length(dat)
w = sample(n,n,replace=T)
dat_BT = dat[w]
dat_kde_BT = density(dat_BT, from = 20, to=120, n=5000, bw=h0)
plot(dat_kde, lwd=3, ylim=c(0, 0.04))
lines(dat_kde_BT, lwd=3, col="red")
plot(1, type="n", xlab="Eruption", ylab="Density")
for (ii in bwds) {
erupt_kde <- density(eruption_dt, bw=ii)
lines(erupt_kde)
}
plot(1, type="n", xlab="Eruption", ylab="Density", xlim=c(0, 8), ylim=c(0, 0.8))
for (ii in bwds) {
erupt_kde <- density(eruption_dt, bw=ii)
lines(erupt_kde)
}
plot(1, type="n", xlab="Eruption", ylab="Density", xlim=c(1, 6), ylim=c(0, 0.8))
for (ii in bwds) {
erupt_kde <- density(eruption_dt, bw=ii)
lines(erupt_kde)
}
plot(1, type="n", xlab="Eruption", ylab="Density", xlim=c(min(eruption_dt), max(eruption_dt)), ylim=c(0, 0.8))
for (ii in bwds) {
erupt_kde <- density(eruption_dt, bw=ii)
lines(erupt_kde)
}
lines(erupt_kde, lwd=3)
lines(erupt_kde, lwd=3, col=bwds)
for (ii in bwds) {
erupt_kde <- density(eruption_dt, bw=ii)
lines(erupt_kde, lwd=3, col=bwds)
}
lines(erupt_kde, lwd=3, col=bwds*2)
colors <- c('red', 'blue', 'green')
plot(1, type="n", xlab="Eruption", ylab="Density", xlim=c(min(eruption_dt), max(eruption_dt)),
ylim=c(0, 0.8), main='KDE Function of Eruption')
bwds <- c(0.1, 0.3, 0.9)
colors <- c('red', 'blue', 'green')
plot(1, type="n", xlab="Eruption", ylab="Density", xlim=c(min(eruption_dt), max(eruption_dt)),
ylim=c(0, 0.8), main='KDE Function of Eruption')
for (ii in 1:length(bwds)) {
erupt_kde <- density(eruption_dt, bw=bwds[ii])
lines(erupt_kde, lwd=3, col=colors[ii])
}
plot(1, type="n", xlab="Eruption", ylab="Density", xlim=c(min(eruption_dt), max(eruption_dt)),
ylim=c(0, 1), main='KDE Function of Eruption')
for (ii in 1:length(bwds)) {
erupt_kde <- density(eruption_dt, bw=bwds[ii])
lines(erupt_kde, lwd=3, col=colors[ii])
}
legend('topright', legend=c('bw=0.1', 'bw=0.3', 'bw=0.9'), col=colors)
legend('topright', legend=c('bw=0.1', 'bw=0.3', 'bw=0.9'), col=colors, lwd=3)
legend('topright', legend=c('bw=0.1', 'bw=0.3', 'bw=0.9'), col=colors, lwd=3, cex=0.75)
legend('topright', legend=c('bw=0.1', 'bw=0.3', 'bw=0.9'), col=colors, lwd=3, cex=0.8)
bwds <- c(0.1, 0.3, 0.9)
colors <- c('red', 'blue', 'green')
plot(1, type="n", xlab="Eruption", ylab="Density", xlim=c(min(eruption_dt), max(eruption_dt)),
ylim=c(0, 1), main='KDE Function of Eruption')
for (ii in 1:length(bwds)) {
erupt_kde <- density(eruption_dt, bw=bwds[ii])
lines(erupt_kde, lwd=3, col=colors[ii])
}
legend('topright', legend=c('bw=0.1', 'bw=0.3', 'bw=0.9'), col=colors, lwd=3, cex=0.8)
hist(eruption_dt, breaks=20)
lines(eruption_dt, lwd=3)
hist(eruption_dt, breaks=20, probability=T)
lines(eruption_dt, lwd=3)
lines(eruption_dt, lwd=3)
lines(eruption_kde, lwd=3)
lines(erupt_kde, lwd=3)
head(dat)
dat_kde = density(dat, from = 20, to=120, n=1000, bw=h0)
length(dat_kde$x)
max(erupt_dt)
max(eruption_dt)
min(eruption_dt)
# question 2-c
erupt_kde <- density(eruption_dt, from=1, to=6, bw=0.6)
length(erupt_kde$x)
# question 2-c
erupt_kde <- density(eruption_dt, from=1, to=6, bw=0.3)
length(erupt_kde$x)
n <- length(erupt_kde$x)
n <- length(eruption_dt)
# question 2-c
erupt_kde <- density(eruption_dt, from=1, to=6, bw=0.3)
n <- length(eruption_dt)
B <- 10000
kde_bt <- matrix(NA, B, length(erupt_kde$x))
for (ii in 1:B) {
sp_index <- sample(n,n,replace=T)
sp_bt <- eruption_dt[sp_index]
sp_kde <- density(sp_bt, from=1, to=6, bw=0.3)
kde_bt[ii,] <- sp_kde$y
}
bt_sd <- sqrt(diag(var(kde_bt)))
head(bt_sd)
bt_sd <- diag(sd(kde_bt))
head(bt_sd)
plot(erupt_kde$x. bt_sd)
bt_sd <- sqrt(diag(var(kde_bt)))
plot(erupt_kde$x. bt_sd)
head(bt_as)
head(bt_sd)
bt_sd
length(bt_sd)
head(erupt_kde$x)
erupt_kde$x
plot(erupt_kde$x, bt_sd)
line(erupt_kde)
lines(erupt_kde)
plot(erupt_kde, lwd=3, col="blue", ylim=c(0,1),main="95% CI of KDE Function")
lines(x=erupt_kde$x,y=erupt_kde$y+qnorm(0.975)*bt_sd, lwd=3, col="dodgerblue",
lty=2)
lines(x=erupt_kde$x,y=erupt_kde$y-qnorm(0.975)*bt_sd, lwd=3, col="dodgerblue",
lty=2)
plot(erupt_kde, lwd=3, col="blue", ylim=c(0,0.8),main="95% CI of KDE Function")
lines(x=erupt_kde$x,y=erupt_kde$y+qnorm(0.975)*bt_sd, lwd=3, col="dodgerblue",
lty=2)
lines(x=erupt_kde$x,y=erupt_kde$y-qnorm(0.975)*bt_sd, lwd=3, col="dodgerblue",
lty=2)
?rdexp
?dexp
dexp_dt <- rdexp(1000, 1)
?doubleexp
?doublex
??doublex
dexp_dt <- rdoublex(n,1)
#setwd('/Users/nantang/Google Drive/STAT 403/Project')
setwd('/Users/nantang/Desktop/Used-Car-Analysis')
# catogorize car make
make_rank_dt <- read.csv('ordered-grouped-make.csv')
# catogorize car make
make_rank_dt <- read.csv('ordered_grouped_make.csv')
car_dt <- read.csv('true_car_listings.csv', header=T)
car_dt <- read.csv('tc.csv', header=T)
nrow(car_dt)
head(car_dt
)
make_rank_dt
density(make_rank_dt$average)
plot(density(make_rank_dt))
plot(density(make_rank_dt, bw=2))
make_avg_den <- density(make_rank_dt, bw=2)
make_avg_den <- density(make_rank_dt)
density(make_rank_dt)
plot(density(make_rank_dt$average))
plot(density(make_rank_dt$average, bw=2))
plot(density(make_rank_dt$average, bw=100))
plot(density(make_rank_dt$average, bw=1000))
plot(density(make_rank_dt$average, bw=10000))
plot(density(make_rank_dt$average, bw=5000))
hist(make_rank_dt$average)
plot(density(make_rank_dt$average, bw=50))
plot(density(make_rank_dt$average, bw=1000))
plot(density(make_rank_dt$average, bw=5000))
plot(density(make_rank_dt$average, bw=4000))
plot(density(make_rank_dt$average, bw=3000))
plot(density(make_rank_dt$average, bw=2000))
plot(density(make_rank_dt$average, bw=2500))
plot(density(make_rank_dt$average, bw=3500))
plot(density(make_rank_dt$average, bw=3000))
plot(density(make_rank_dt$average, bw=4000))
plot(density(make_rank_dt$average, bw=3000))
plot(density(make_rank_dt$average, bw=2000))
plot(density(make_rank_dt$average, bw=100))
plot(density(make_rank_dt$average, bw=500))
plot(density(make_rank_dt$average, bw=5000))
plot(density(make_rank_dt$average, bw=4000))
plot(density(make_rank_dt$average, bw=3000))
plot(density(make_rank_dt$average, bw=4000))
?kmeans
kmeans(make_rank_dt,3)
# do kde for make average price, split by local minimum
plot(density(make_rank_dt$average, bw=4000))
# do kde for make average price, split by local minimum
make_avg_den <- density(make_rank_dt$average, bw=4000)
make_avg_den[,which(make_avg_den$y=0)]
make_avg_den[,which(make_avg_den$y==0)]
make_avg_den
ts_y<-ts(make_avg_den$y)
require(pastecs)
library(pastecs)
install.packages("pastecs")
library(pastecs)
tp<-turnpoints(ts_y)
points(make_avg_den$x[tp$tppos],make_avg_den$y[tp$tppos],col="red")
# do kde for make average price, split by local minimum
make_avg_den <- density(make_rank_dt$average, bw=10000)
ts_y<-ts(make_avg_den$y)
library(pastecs)
tp<-turnpoints(ts_y)
plot(density(make_rank_dt$average, bw=4000))
points(make_avg_den$x[tp$tppos],make_avg_den$y[tp$tppos],col="red")
plot(density(make_rank_dt$average, bw=10000))
points(make_avg_den$x[tp$tppos],make_avg_den$y[tp$tppos],col="red")
plot(density(make_rank_dt$average, bw=50000))
# do kde for make average price, split by local minimum
make_avg_den <- density(make_rank_dt$average, bw=5000)
ts_y<-ts(make_avg_den$y)
tp<-turnpoints(ts_y)
plot(density(make_rank_dt$average, bw=5000))
points(make_avg_den$x[tp$tppos],make_avg_den$y[tp$tppos],col="red")
make_avg_den$x[tp$tppos]
text(make_avg_den$x[tp$tppos], make_avg_den$x[tp$tppos])
text(make_avg_den$x[tp$tppos], make_avg_den$y[tp$tppos])
plot(density(make_rank_dt$average, bw=5000))
points(make_avg_den$x[tp$tppos],make_avg_den$y[tp$tppos],col="red")
text(make_avg_den$x[tp$tppos], make_avg_den$y[tp$tppos])
make_avg_den$x[tp$tppos]
make_avg_den$x[tp$tppos,]
text(make_avg_den$x[tp$tppos], make_avg_den$y[tp$tppos], row.names(make_avg_den$x[tp$tppos]))
plot(density(make_rank_dt$average, bw=5000))
points(make_avg_den$x[tp$tppos],make_avg_den$y[tp$tppos],col="red")
text(make_avg_den$x[tp$tppos], make_avg_den$y[tp$tppos], row.names(make_avg_den$x[tp$tppos]))
text(make_avg_den$x[tp$tppos], make_avg_den$y[tp$tppos], row.names(1))
text(make_avg_den$x[tp$tppos], make_avg_den$y[tp$tppos])
text(make_avg_den$y[tp$tppos], make_avg_den$y[tp$tppos])
tp$tppos
text(make_avg_den$x[tp$tppos], make_avg_den$y[tp$tppos], row.names(tp$tppos))
text(make_avg_den$x[tp$tppos]~make_avg_den$y[tp$tppos], row.names(tp$tppos))
text(make_avg_den$x[tp$tppos]~make_avg_den$y[tp$tppos])
text(make_avg_den$x[tp$tppos]~make_avg_den$y[tp$tppos], labels=make_avg_den$x[tp$tppos])
make_avg_den$y[tp$tppos]
plot(density(make_rank_dt$average, bw=5000))
points(make_avg_den$x[tp$tppos],make_avg_den$y[tp$tppos],col="red")
min(make_avg_den$y[tp$tppos])
make_avg_den$x[tp$tppos]
make_avg_den$y[tp$tppos][1]
make_avg_den$y[tp$tppos][make_avg_den$y[tp$tppos]=0]
make_avg_den$y[tp$tppos][make_avg_den$y[tp$tppos]==0]
x_tp <- make_avg_den$x[tp$tppos]
y_tp <- make_avg_den$y[tp$tppos]
x_tp
x_tp[1]
split_pt1 <- x_tp[y_tp[which(y_tp==min(y_tp))]]
y_tp[which(y_tp==min(y_tp))]
split_pt1 <- x_tp[y_tp[which(y_tp %in %min(y_tp))]]
split_pt1 <- x_tp[y_tp[which(y_tp %in% min(y_tp))]]
split_pt1 <- x_tp[y_tp[which(y_tp %in% min(y_tp))]]
split_pt1 <- x_tp[y_tp[which(y_tp %in% min(y_tp))]]
y_tp[which(y_tp %in% min(y_tp))]
y_tp[which.min(y_tp)]
[which.min(y_tp)]
which.min(y_tp)
split_pt1 <- x_tp[which.min(y_tp)]
which.min(y_tp[-min(y_tp)])
which.min(y_tp[-split_pt1])
y_tp[-1]
y_tp
y_tp[-2]
y_tp[-8]
min(y_tp[-8])
split_pt1 <- x_tp[which.min(y_tp[-which.min(y_tp)])]
split_pt2 <- x_tp[which.min(y_tp)]
split_pt1 <- x_tp[which.min(y_tp[-which.min(y_tp)])]
abline(v=c(split_pt1, split_pt2))
abline(v=c(split_pt1, split_pt2), lty=3)
plot(density(make_rank_dt$average, bw=5000))
abline(v=c(split_pt1, split_pt2), lty=3)
abline(v=c(split_pt1, split_pt2), lty=3, lwd=2, col=red)
plot(density(make_rank_dt$average, bw=5000), main='Kernel Density of Make Average Price')
abline(v=c(split_pt1, split_pt2), lty=3, lwd=2, col='red')
plot(density(make_rank_dt$average, bw=5000), lwd=2,
main='Kernel Density of Make Average Price')
abline(v=c(split_pt1, split_pt2), lty=3, lwd=2, col='red')
make_category <- rep(NA, nrow(make_rank_dt))
make_rank_dt$average[1]
make_category <- rep(NA, nrow(make_rank_dt))
for (ii in 1:nrow(make_rank_dt)) {
avg <- make_rank_dt$average[ii]
if (avg <= split_pt1) {
make_category[ii] <- 'low-end'
} else if (avg > split_pt1 & avg <= split_pt2) {
make_category[ii] <- 'mid-range'
} else {
make_category[ii] <- 'high-end'
}
}
make_category
plot(density(make_rank_dt$average, bw=3000), lwd=2,
main='Kernel Density of Make Average Price')
abline(v=c(split_pt1, split_pt2), lty=3, lwd=2, col='red')
make_category <- rep(NA, nrow(make_rank_dt))
plot(density(make_rank_dt$average, bw=1000), lwd=2,
main='Kernel Density of Make Average Price')
plot(density(make_rank_dt$average, bw=2000), lwd=2,
main='Kernel Density of Make Average Price')
plot(density(make_rank_dt$average, bw=5000), lwd=2,
main='Kernel Density of Make Average Price')
abline(v=c(split_pt1, split_pt2), lty=3, lwd=2, col='red')
plot(density(make_rank_dt$average, bw=8000), lwd=2,
main='Kernel Density of Make Average Price')
abline(v=c(split_pt1, split_pt2), lty=3, lwd=2, col='red')
# do kde for make average price, split by local minimum
make_avg_den <- density(make_rank_dt$average, bw=8000)
ts_y<-ts(make_avg_den$y)
tp<-turnpoints(ts_y)
x_tp <- make_avg_den$x[tp$tppos]
y_tp <- make_avg_den$y[tp$tppos]
split_pt2 <- x_tp[which.min(y_tp)]
split_pt1 <- x_tp[which.min(y_tp[-which.min(y_tp)])]
plot(density(make_rank_dt$average, bw=8000), lwd=2,
main='Kernel Density of Make Average Price')
abline(v=c(split_pt1, split_pt2), lty=3, lwd=2, col='red')
make_category <- rep(NA, nrow(make_rank_dt))
for (ii in 1:nrow(make_rank_dt)) {
avg <- make_rank_dt$average[ii]
if (avg <= split_pt1) {
make_category[ii] <- 'low-end'
} else if (avg > split_pt1 & avg <= split_pt2) {
make_category[ii] <- 'mid-range'
} else {
make_category[ii] <- 'high-end'
}
}
make_category
make_rank_dt
plot(density(make_rank_dt$average, bw=10000), lwd=2,
main='Kernel Density of Make Average Price')
abline(v=c(split_pt1, split_pt2), lty=3, lwd=2, col='red')
split_pt1 <- x_tp[which.max(y_tp)]
plot(density(make_rank_dt$average, bw=10000), lwd=2,
main='Kernel Density of Make Average Price')
abline(v=c(split_pt1, split_pt2), lty=3, lwd=2, col='red')
make_category <- rep(NA, nrow(make_rank_dt))
for (ii in 1:nrow(make_rank_dt)) {
avg <- make_rank_dt$average[ii]
if (avg <= split_pt1) {
make_category[ii] <- 'low-end'
} else if (avg > split_pt1 & avg <= split_pt2) {
make_category[ii] <- 'mid-range'
} else {
make_category[ii] <- 'high-end'
}
}
make_category
split_pt1
car_make_category <- data.frame(Make=make_rank_dt$Make, Category=make_category)
car_make_category
write.csv(car_make_category, 'make_category.csv')
car_make_category[Make='FIAT']
car_make_category[Make='FIAT',]
car_make_category[Make=='FIAT',]
car_make_category[car_make_category$Make=='FIAT',]
car_make_category[car_make_category$Make=='FIAT]
''
ffef
}
]
']
car_make_category[car_make_category$Make=='FIAT']
car_make_category[car_make_category$Make=='FIAT',]
car_make_category[car_make_category$Make=='FIAT',][2]
# updata car dataset
temp <- rep(NA, nrow(car_dt))
head(car_dt)
car_dt[1,Make]
car_dt$Make[1]
# updata car dataset
temp <- rep(NA, nrow(car_dt))
for (ii in 1:nrow(car_dt)) {
temp_make <- car_dt$Make[ii]
temp[ii] <- car_make_category[car_make_category$Make==temp_make,][2]
}
car_make_category <- data.frame(Make=make_rank_dt$Make, Category=as.factor(make_category))
car_make_category
car_make_category[2]
car_make_category$Category[2]
for (ii in 1:nrow(car_dt)) {
temp_make <- car_dt$Make[ii]
temp[ii] <- car_make_category[car_make_category$Make==temp_make,][2]
}
as.character(car_make_category$Category[2])
car_make_category <- data.frame(Make=make_rank_dt$Make, Category=make_category)
for (ii in 1:nrow(car_dt)) {
temp_make <- as.charactor(car_dt$Make[ii])
temp[ii] <- car_make_category[car_make_category$Make==temp_make,][2]
}
for (ii in 1:nrow(car_dt)) {
temp_make <- as.character(car_dt$Make[ii])
temp[ii] <- car_make_category[car_make_category$Make==temp_make,][2]
}
head(temp)
new_tc <- data.frame(car_dt, Category=temp)
write.csv(new_tc, 'new_tc.csv')
small <- head(car_dt)
small
small_2 <- head(temp)
small_2
new_tc <- data.frame(small, Category=small_2)
new_tc
View(new_tc)
new_tc <- data.frame(small$Make, Category=small_2)
small_2
typeof(small_2)
typeof(temp)
typeof(make_category)
make_category
temp <- rep(NA, nrow(small))
for (ii in 1:nrow(small)) {
temp_make <- as.character(small$Make[ii])
temp[ii] <- car_make_category[car_make_category$Make==temp_make,][2]
}
temp
temp_make <- as.character(small$Make[1])
temo_make
temp_make
car_make_category[car_make_category$Make==temp_make,]
car_make_category[car_make_category$Make==temp_make,2]
temp <- rep(NA, nrow(small))
for (ii in 1:nrow(small)) {
temp_make <- as.character(small$Make[ii])
temp[ii] <- car_make_category[car_make_category$Make==temp_make,2]
}
typeof(temp)
temp
car_make_category[car_make_category$Make==temp_make,2]
car_make_category[car_make_category$Make==temp_make,2]
temp <- rep(NA, nrow(small))
for (ii in 1:nrow(small)) {
temp_make <- as.character(small$Make[ii])
temp[ii] <- car_make_category[car_make_category$Make==temp_make,2]
}
temp
temp[1] <- car_make_category[car_make_category$Make==temp_make,2]
temp
temp[1] <- car_make_category[car_make_category$Make==temp_make]
temp[1] <- car_make_category[car_make_category$Make==temp_make,2]
car_make_category[car_make_category$Make==temp_make,2]
temp[1] <- car_make_category[car_make_category$Make==temp_make,2]
temp[1]
temp[1] <- as.character(car_make_category[car_make_category$Make==temp_make,2])
temp[ii] <- as.character(car_make_category[car_make_category$Make==temp_make,2])
temp[ii] <- as.factor(car_make_category[car_make_category$Make==temp_make,2])
temp[ii] <- as.character(car_make_category[car_make_category$Make==temp_make,2])
temp[ii] <- as.factor(car_make_category[car_make_category$Make==temp_make,2])
temp <- rep(NA, nrow(small))
for (ii in 1:nrow(small)) {
temp_make <- as.character(small$Make[ii])
temp[ii] <- as.factor(car_make_category[car_make_category$Make==temp_make,2])
}
typeof(temp)
temp
temp <- rep(NA, nrow(small))
for (ii in 1:nrow(small)) {
temp_make <- as.character(small$Make[ii])
temp[ii] <- as.factor(car_make_category[car_make_category$Make==temp_make,2])
}
temp[ii] <- as.character(car_make_category[car_make_category$Make==temp_make,2])
temp <- rep(NA, nrow(small))
for (ii in 1:nrow(small)) {
temp_make <- as.character(small$Make[ii])
temp[ii] <- as.character(car_make_category[car_make_category$Make==temp_make,2])
}
typeof(temp)
# updata car dataset
temp <- rep(NA, nrow(car_dt))
for (ii in 1:nrow(car_dt)) {
temp_make <- as.character(car_dt$Make[ii])
temp[ii] <- as.character(car_make_category[car_make_category$Make==temp_make,2])
}
typeof(temp)
nrow(temp)
length(temp)
small_2<-head(temp)
typeof(small_2)
new_tc <- data.frame(small, Category=small_2)
View(new_tc)
new_tc <- data.frame(small, Category=as.factor(small_2))
View(new_tc)
new_tc$Category
new_tc <- data.frame(car_dt, Category=as.factor(temp))
View(new_tc)
levels(new_tc)
levels(new_tc$Category)
write.csv(new_tc, 'new_tc.csv')
nrow(new_tc)
